async generateViralContent() {
        console.log('🔥 GENERATING VIRAL CONTENT IDEAS...');
        
        const topTrends = this.allTrends.slice(0, 10);
        const topProducts = this.allProducts.slice(0, 15);
        
        topTrends.forEach(trend => {
            const relatedProducts = topProducts.filter(p => 
                this.isProductRelatedToTrend(trend, p)
            );
            
            relatedProducts.forEach(product => {
                this.contentIdeas.push({
                    trend: trend.trend,
                    product: product.title,
                    platform: trend.platform,
                    content_type: this.getContentType(trend.platform),
                    viral_potential: this.calculateViralPotential(trend, product),
                    hooks: this.generateContentHooks(trend, product),
                    hashtags: this.generateHashtags(trend, product),
                    call_to_action: this.generateCTA(product),
                    best_posting_time: this.getBestPostingTime(trend.platform),
                    automation_ready: true,
                    timestamp: new Date().toISOString()
                });
            });
        });
        
        console.log(`🎯 Generated ${this.contentIdeas.length} viral content ideas`);
    }

    // HELPER METHODS
    findRelatedProducts(topic) {
        const productMap = {
            'aesthetic room decor': ['LED Strip Lights', 'Cloud Light', 'Aesthetic Mirror'],
            'skincare routine': ['LED Face Mask', 'Jade Roller', 'Vitamin C Serum'],
            'workout gear': ['Resistance Bands', 'Yoga Mat', 'Protein Shaker'],
            'phone accessories': ['Ring Holder', 'Wireless Charger', 'Phone Case'],
            'kitchen gadgets': ['Multi-tool', 'LED Lights', 'Smart Organizer'],
            'fashion trends': ['Oversized Hoodie', 'Platform Sneakers', 'Chain Necklace']
        };
        
        return productMap[topic] || ['Generic Trending Product'];
    }

    calculateTikTokShopProfit(price, sales, discount) {
        const numPrice = parseFloat(price.replace('$', ''));
        const numSales = parseInt(sales.replace(/[^0-9]/g, ''));
        const numDiscount = parseFloat(discount.replace('%', ''));
        
        const estimatedCost = numPrice * 0.4; // 40% cost ratio
        const profitPerUnit = numPrice - estimatedCost;
        const totalProfit = profitPerUnit * (numSales * 0.1); // 10% of claimed sales
        
        return {
            profit_per_unit: `$${profitPerUnit.toFixed(2)}`,
            estimated_monthly_profit: `$${(totalProfit * 30).toFixed(2)}`,
            margin_percent: `${((profitPerUnit / numPrice) * 100).toFixed(1)}%`,
            score: Math.min(95, Math.floor((profitPerUnit / numPrice) * 100))
        };
    }

    calculateViralScore(views, sales) {
        const numViews = parseInt(views.replace(/[^0-9]/g, ''));
        const numSales = parseInt(sales.replace(/[^0-9]/g, ''));
        
        const conversionRate = (numSales / numViews) * 100;
        const engagementScore = Math.min(100, numViews / 10000);
        const salesScore = Math.min(100, numSales / 100);
        
        return Math.floor((conversionRate * 20) + (engagementScore * 0.4) + (salesScore * 0.4));
    }

    calculatePODProfit(baseCost, retailPrice) {
        const cost = parseFloat(baseCost.replace('$', ''));
        const retail = parseFloat(retailPrice.replace('$', ''));
        
        const profit = retail - cost;
        const margin = ((profit / retail) * 100);
        
        return {
            amount: `$${profit.toFixed(2)}`,
            margin: `${margin.toFixed(1)}%`,
            score: Math.floor(margin)
        };
    }

    getPrintfulIntegrationSteps(productTitle) {
        return [
            'Connect Printful API',
            `Create ${productTitle} product`,
            'Design mockups',
            'Set pricing strategy',
            'Connect to store',
            'Launch marketing campaign'
        ];
    }

    assessScalingPotential(category, title) {
        const scalingFactors = {
            't-shirts': 'high',
            'hoodies': 'high', 
            'mugs': 'medium',
            'phone-cases': 'high',
            'posters': 'medium',
            'bags': 'medium'
        };
        
        return scalingFactors[category] || 'medium';
    }

    analyzePODPotential(title, sales, price) {
        const numSales = parseInt(sales);
        const numPrice = parseFloat(price.replace('$', ''));
        
        const profitScore = Math.min(100, (numPrice - 8) * 10); // Assuming $8 base cost
        const popularityScore = Math.min(100, numSales / 50);
        const replicationScore = title.toLowerCase().includes('simple') ? 90 : 70;
        
        return {
            profit_score: Math.floor(profitScore),
            popularity_score: Math.floor(popularityScore),
            replication_score: replicationScore,
            overall_score: Math.floor((profitScore + popularityScore + replicationScore) / 3)
        };
    }

    calculateDropshippingProfit(price) {
        const cost = parseFloat(price.replace('$', ''));
        const suggestedRetail = cost * 2.5; // 2.5x markup
        const profit = suggestedRetail - cost;
        const margin = ((profit / suggestedRetail) * 100);
        
        return {
            suggested_retail: `$${suggestedRetail.toFixed(2)}`,
            profit: `$${profit.toFixed(2)}`,
            margin: `${margin.toFixed(1)}%`
        };
    }

    findProfitableMatches(trend) {
        return this.allProducts.filter(product => {
            const trendKeywords = trend.trend.toLowerCase().split(' ');
            const productTitle = product.title.toLowerCase();
            
            return trendKeywords.some(keyword => 
                productTitle.includes(keyword) || 
                this.isRelatedKeyword(keyword, productTitle)
            );
        });
    }

    isRelatedKeyword(keyword, productTitle) {
        const relations = {
            'aesthetic': ['led', 'light', 'decor', 'mirror'],
            'skincare': ['mask', 'roller', 'serum', 'tool'],
            'workout': ['resistance', 'yoga', 'fitness', 'protein'],
            'phone': ['case', 'holder', 'charger', 'mount'],
            'home': ['light', 'organizer', 'decor', 'gadget']
        };
        
        const related = relations[keyword] || [];
        return related.some(rel => productTitle.includes(rel));
    }

    calculateProfitScore(trend, product) {
        let score = 0;
        
        // Trend popularity (30%)
        const engagement = trend.engagement || 0;
        score += Math.min(30, engagement / 10000);
        
        // Product pricing (25%)
        const price = parseFloat(product.price?.replace('$', '') || '0');
        if (price > 10 && price < 50) score += 25;
        else if (price > 5) score += 15;
        
        // Platform factor (20%)
        const platformScores = { tiktok: 20, instagram: 18, youtube: 15, twitter: 10 };
        score += platformScores[trend.platform] || 10;
        
        // Product category (15%)
        const hotCategories = ['electronics', 'beauty', 'fashion', 'home'];
        if (hotCategories.includes(product.category)) score += 15;
        else score += 8;
        
        // Automation readiness (10%)
        if (product.integration_ready) score += 10;
        else score += 5;
        
        return Math.floor(score);
    }

    getIntegrationStrategy(product) {
        const strategies = {
            tiktok_shop: 'Direct TikTok Shop integration',
            printful: 'Print-on-demand automation',
            printify: 'Multi-platform POD scaling',
            aliexpress: 'Dropshipping automation',
            amazon: 'FBA or dropshipping',
            etsy: 'POD marketplace integration'
        };
        
        return strategies[product.platform] || 'Custom integration required';
    }

    estimateRevenue(trend, product) {
        const engagement = trend.engagement || 50000;
        const price = parseFloat(product.price?.replace('$', '') || '25');
        const conversionRate = 0.02; // 2% conversion
        
        const dailySales = Math.floor((engagement / 30) * conversionRate);
        const monthlyRevenue = dailySales * price * 30;
        
        return {
            daily_sales: dailySales,
            monthly_revenue: `$${monthlyRevenue.toFixed(2)}`,
            potential_tier: monthlyRevenue > 10000 ? 'high' : monthlyRevenue > 2000 ? 'medium' : 'low'
        };
    }

    getAutomationSteps(trend, product) {
        return [
            'Market research validation',
            'Supplier identification',
            'Product listing creation',
            'Content automation setup',
            'Social media integration',
            'Order fulfillment automation',
            'Customer service automation',
            'Analytics and optimization'
        ];
    }

    getScalingPlan(product) {
        return {
            phase1: 'Single product validation',
            phase2: 'Product variation expansion',
            phase3: 'Multi-platform integration',
            phase4: 'Automation and optimization',
            target_timeline: '3-6 months to scale'
        };
    }

    assessCompetition(trend, product) {
        const competitionLevels = {
            'electronics': 'high',
            'beauty': 'medium',
            'fashion': 'high',
            'home': 'medium',
            'fitness': 'medium'
        };
        
        return competitionLevels[product.category] || 'medium';
    }

    estimateTimeToMarket(product) {
        const timelines = {
            tiktok_shop: '1-2 weeks',
            printful: '1-3 days',
            printify: '1-3 days',
            aliexpress: '1-2 weeks',
            amazon: '2-4 weeks',
            etsy: '1 week'
        };
        
        return timelines[product.platform] || '1-2 weeks';
    }

    isProductRelatedToTrend(trend, product) {
        const trendWords = trend.trend.toLowerCase().split(' ');
        const productWords = product.title.toLowerCase().split(' ');
        
        return trendWords.some(trendWord => 
            productWords.some(productWord => 
                trendWord.includes(productWord) || 
                productWord.includes(trendWord) ||
                this.areRelatedTerms(trendWord, productWord)
            )
        );
    }

    areRelatedTerms(term1, term2) {
        const relations = [
            ['aesthetic', 'led', 'light', 'decor'],
            ['skincare', 'beauty', 'face', 'serum'],
            ['workout', 'fitness', 'gym', 'exercise'],
            ['phone', 'mobile', 'device', 'tech'],
            ['fashion', 'clothing', 'style', 'wear']
        ];
        
        return relations.some(group => 
            group.includes(term1) && group.includes(term2)
        );
    }

    getContentType(platform) {
        const contentTypes = {
            tiktok: ['short video', 'trend dance', 'product demo'],
            instagram: ['reel', 'story', 'post', 'carousel'],
            youtube: ['short', 'product review', 'unboxing'],
            twitter: ['thread', 'tweet', 'poll']
        };
        
        const types = contentTypes[platform] || ['post'];
        return types[Math.floor(Math.random() * types.length)];
    }

    calculateViralPotential(trend, product) {
        let score = 0;
        
        // Trend engagement
        const engagement = trend.engagement || 0;
        score += Math.min(40, engagement / 25000);
        
        // Product appeal
        const price = parseFloat(product.price?.replace('$', '') || '25');
        if (price < 30) score += 30; // Affordable products go viral easier
        else if (price < 50) score += 20;
        else score += 10;
        
        // Platform viral factor
        const viralFactors = { tiktok: 30, instagram: 25, youtube: 20, twitter: 15 };
        score += viralFactors[trend.platform] || 10;
        
        return Math.min(100, Math.floor(score));
    }

    generateContentHooks(trend, product) {
        const hooks = [
            `This ${product.title} is trending everywhere!`,
            `Everyone's obsessed with this ${trend.trend} hack`,
            `POV: You found the perfect ${product.title}`,
            `This ${trend.trend} trend is about to blow up`,
            `Why everyone needs this ${product.title}`,
            `The ${product.title} that's taking over ${trend.platform}`
        ];
        
        return hooks.slice(0, 3);
    }

    generateHashtags(trend, product) {
        const trendHashtags = trend.hashtags || [];
        const productHashtags = [
            `#${product.title.replace(/\s+/g, '').toLowerCase()}`,
            '#trending',
            '#viral',
            '#musthave'
        ];
        
        return [...trendHashtags, ...productHashtags].slice(0, 8);
    }

    generateCTA(product) {
        const ctas = [
            `Get your ${product.title} now!`,
            'Link in bio to shop',
            'Available on our store',
            'Limited time offer',
            'Shop the link',
            'Get yours before they sell out'
        ];
        
        return ctas[Math.floor(Math.random() * ctas.length)];
    }

    getBestPostingTime(platform) {
        const times = {
            tiktok: '6-10 PM',
            instagram: '11 AM - 2 PM',
            youtube: '2-4 PM',
            twitter: '9 AM - 10 AM'
        };
        
        return times[platform] || '12-2 PM';
    }

    // API ENDPOINTS
    getDashboardData() {
        return {
            status: 'active',
            monthly_target: this.monthlyRevenueTarget,
            total_trends: this.allTrends.length,
            total_products: this.allProducts.length,
            profit_opportunities: this.profitMatches.length,
            content_ideas: this.contentIdeas.length,
            pod_opportunities: this.podOpportunities.length,
            tiktok_shop_products: this.tiktokShopProducts.length,
            scraping_status: this.scrapingActive,
            last_scrape: this.lastScrapeTime,
            last_profit_calc: this.lastProfitCalculation,
            top_opportunities: this.profitMatches.slice(0, 5),
            automation_status: this.podAutomationActive ? 'active' : 'standby'
        };
    }

    getTopOpportunities(limit = 10) {
        return this.profitMatches
            .sort((a, b) => b.profit_score - a.profit_score)
            .slice(0, limit);
    }

    getContentCalendar() {
        return this.contentIdeas
            .sort((a, b) => b.viral_potential - a.viral_potential)
            .slice(0, 30)
            .map(idea => ({
                ...idea,
                scheduled_date: new Date(Date.now() + Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                status: 'ready'
            }));
    }

    async activatePODAutomation() {
        this.podAutomationActive = true;
        console.log('🎨 POD AUTOMATION ACTIVATED - AUTO-SCALING TO $1M+');
        
        // Auto-create products on multiple platforms
        this.podOpportunities.forEach(opportunity => {
            console.log(`🚀 Auto-creating: ${opportunity.product || opportunity.design_concept}`);
        });
        
        return { status: 'activated', message: 'POD automation running' };
    }

    async stopAllAutomation() {
        Object.keys(this.scrapingActive).forEach(key => {
            this.scrapingActive[key] = false;
        });
        this.podAutomationActive = false;
        console.log('⏹️ All automation stopped');
        return { status: 'stopped', message: 'All automation processes stopped' };
    }
}

// Initialize the Million Dollar Agent
const millionDollarAgent = new MillionDollarDropshippingAgent();

// API Routes
app.get('/', (req, res) => {
    res.json({
        message: '💰 MILLION DOLLAR DROPSHIPPING AUTOMATION AGENT',
        status: 'Ready to make millions',
        target: '$1,000,000+ monthly revenue',
        features: [
            '🛍️ TikTok Shop Integration',
            '🎨 Print-on-Demand Automation',
            '📦 Multi-Platform Dropshipping',
            '🔥 Viral Content Generation',
            '📈 Trend Analysis & Profit Matching',
            '🤖 Complete Business Automation'
        ]
    });
});

app.get('/api/dashboard', (req, res) => {
    res.json(millionDollarAgent.getDashboardData());
});

app.get('/api/opportunities', (req, res) => {
    const limit = parseInt(req.query.limit) || 10;
    res.json(millionDollarAgent.getTopOpportunities(limit));
});

app.get('/api/trends', (req, res) => {
    res.json({
        total: millionDollarAgent.allTrends.length,
        trends: millionDollarAgent.allTrends.slice(0, 20)
    });
});

app.get('/api/products', (req, res) => {
    const platform = req.query.platform;
    let products = millionDollarAgent.allProducts;
    
    if (platform) {
        products = products.filter(p => p.platform === platform);
    }
    
    res.json({
        total: products.length,
        platform: platform || 'all',
        products: products.slice(0, 50)
    });
});

app.get('/api/tiktok-shop', (req, res) => {
    res.json({
        total: millionDollarAgent.tiktokShopProducts.length,
        products: millionDollarAgent.tiktokShopProducts
    });
});

app.get('/api/pod-opportunities', (req, res) => {
    res.json({
        total: millionDollarAgent.podOpportunities.length,
        opportunities: millionDollarAgent.podOpportunities
    });
});

app.get('/api/content-calendar', (req, res) => {
    res.json(millionDollarAgent.getContentCalendar());
});

app.post('/api/start-automation', (req, res) => {
    millionDollarAgent.start();
    res.json({ message: '🚀 Million Dollar Automation Started!', status: 'active' });
});

app.post('/api/activate-pod', async (req, res) => {
    const result = await millionDollarAgent.activatePODAutomation();
    res.json(result);
});

app.post('/api/stop-automation', async (req, res) => {
    const result = await millionDollarAgent.stopAllAutomation();
    res.json(result);
});

app.post('/api/scrape-now', async (req, res) => {
    console.log('🔥 Manual scraping initiated...');
    await millionDollarAgent.scrapeAllTrendingContent();
    await millionDollarAgent.scrapeAllMoneyMakingPlatforms();
    await millionDollarAgent.calculateProfitOpportunities();
    
    res.json({ 
        message: '✅ Scraping completed', 
        data: millionDollarAgent.getDashboardData() 
    });
});

// Start the server
app.listen(PORT, () => {
    console.log('');
    console.log('💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰');
    console.log('💰  MILLION DOLLAR DROPSHIPPING AGENT  💰');
    console.log('💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰');
    console.log('');
    console.log(`🚀 Server running on port ${PORT}`);
    console.log(`🎯 Target: $1,000,000+ monthly revenue`);
    console.log(`📊 Dashboard: http://localhost:${PORT}`);
    console.log('');
    console.log('🔥 FEATURES READY:');
    console.log('  🛍️ TikTok Shop Auto-Integration');
    console.log('  🎨 POD Complete Automation');
    console.log('  📦 Multi-Platform Dropshipping');
    console.log('  📈 Real-Time Profit Opportunities');
    console.log('  🤖 Viral Content Auto-Generation');
    console.log('  💎 AI-Powered Trend Matching');
    console.log('');
    
    // Auto-start the million dollar automation
    setTimeout(() => {
        millionDollarAgent.start();
    }, 3000);
});

export default app;
